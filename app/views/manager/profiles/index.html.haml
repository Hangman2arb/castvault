= turbo_frame_tag 'profiles' do
  = render HeaderComponent.new(title: @title, description: @description)

  = form_with url: manager_profiles_path, method: :get, local: true, class: "p-6", data: { controller: 'autosave profiles-form loader', autosave_delay_value: 0 } do |form|
    .modal-overlay{ data: { profiles_form_target: "overlay" }, class: "hidden z-50 fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center scroll-m-0" }
      #drawer-profiles{class: "fixed top-0 right-0 w-full md:w-3/6 z-50 h-screen p-4 overflow-y-auto bg-gray-700 dark:bg-gray-800 transition-transform duration-1000 ease-in-out transform translate-x-full", tabindex: "-1", aria: {labelledby: "drawer-profiles-label"}, data: {profiles_form_target: 'modal'}}
        %h5#drawer-profiles-label{class: "text-base font-semibold text-gray-500 dark:text-gray-400"}
          %span
            = t('profiles_controller.filters_title')
        %button{type: "button", data: {action: "click->profiles-form#close"}, class: "text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 right-2.5 inline-flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white", aria: {controls: "drawer-profiles"}}
          %span.sr-only Close menu
          = render BootstrapIconWithTextComponent.new(icon: 'x', extra_classes: 'text-3xl')

        %nav.flex.items-center.justify-center.border-b.py-4{class: "border-white/10"}
          %ul.flex.flex-none.gap-x-6.px-2.text-sm.font-semibold.leading-6.text-gray-400{role: "list"}
            %li{class: 'btn-primary-no-hover', data: {action: 'click->profiles-form#switchToGlobal', profiles_form_target: 'globalTab'}}
              = t("profiles_controller.search_terms.global")
            %li{class: 'btn-terciary', data: {action: 'click->profiles-form#switchToHabilities', profiles_form_target: 'habilitiesTab'}}
              = t("profiles_controller.search_terms.habilidades")
          .cursor-pointer.font-bold.text-white{ data: { action: "click->profiles-form#close" } }

        %div{data: { profiles_form_target: 'globalTabContent' }}
          .grid.grid-cols-1.md:grid-cols-2.gap-4.mt-4
            = render InputComponent.new(key: :name, label: t('profiles_controller.search_terms.name'), placeholder: t('profiles_controller.search_terms.name'), form: form)
            = render InputComponent.new(key: :city, label: t('profiles_controller.search_terms.city'), placeholder: t('profiles_controller.search_terms.city'), form: form)
          .grid.grid-cols-1.md:grid-cols-3.gap-4.my-6
            = render SelectComponent.new(key: :gender, label: t('profiles_controller.search_terms.gender'), options_for_select: options_for_select(Form::GENDER_OPTIONS.map { |option| [t("profiles_controller.search_terms.#{option}"), option] }, selected: params[:gender]), placeholder: t('profiles_controller.search_terms.any_gender'), form: form)
            = render SelectComponent.new(key: :ethnicity, label: t('profiles_controller.search_terms.ethnicity'), options_for_select: options_for_select(Form::ETHNICITY_OPTIONS.map { |option| [t("profiles_controller.search_terms.#{option}"), option] }, selected: params[:ethnicity]), placeholder: t('profiles_controller.search_terms.any_ethnicity'), form: form)
            = render SelectComponent.new(key: :agent_name, label: t('profiles_controller.search_terms.agency'), options_for_select: options_for_select(@agencies, selected: params[:agent_name]), placeholder: t('profiles_controller.search_terms.any_agency'), form: form)
            = render SelectComponent.new(key: :hair_type, label: t('profiles_controller.search_terms.hair_type'), options_for_select: options_for_select(Form::HAIR_TYPE_OPTIONS.map { |option| [t("profiles_controller.search_terms.#{option}"), option] }, selected: params[:hair_type]), placeholder: t('profiles_controller.search_terms.any_hair_type'), form: form)
            = render SelectComponent.new(key: :hair_color, label: t('profiles_controller.search_terms.hair_color'), options_for_select: options_for_select(Form::HAIR_COLOR_OPTIONS.map { |option| [t("profiles_controller.search_terms.#{option}"), option] }, selected: params[:hair_color]), placeholder: t('profiles_controller.search_terms.any_hair_color'), form: form)
            = render SelectComponent.new(key: :eye_color, label: t('profiles_controller.search_terms.eye_color'), options_for_select: options_for_select(Form::EYE_COLOR_OPTIONS.map { |option| [t("profiles_controller.search_terms.#{option}"), option] }, selected: params[:eye_color]), placeholder: t('profiles_controller.search_terms.any_eye_color'), form: form)
            = render SelectComponent.new(key: :passport, label: t('profiles_controller.search_terms.passport'), options_for_select: options_for_select(@boolean_options, selected: params[:passport]), placeholder: t('profiles_controller.search_terms.select'), form: form)
            = render SelectComponent.new(key: :driving_license, label: t('profiles_controller.search_terms.driving_license'), options_for_select: options_for_select(@boolean_options, selected: params[:driving_license]), placeholder: t('profiles_controller.search_terms.select'), form: form)
            = render SelectComponent.new(key: :food_allergies, label: t('profiles_controller.search_terms.food_allergies'), options_for_select: options_for_select(@boolean_options, selected: params[:food_allergies]), placeholder: t('profiles_controller.search_terms.select'), form: form)

          %label.text-shadowy-200
            = t("profiles_controller.available_for_title")
          .flex.items-center.justify-between.gap-4
            - Form::AVAILABLE_FOR_OPTIONS.each do |available_for|
              .flex.items-center.gap-2.text-shadowy-200.text-sm
                = render CustomCheckboxComponent.new(form: form, label: t("profiles_controller.available_for.#{available_for}"), key: "available_for[]", value: available_for, checked: params[:available_for]&.include?(available_for))

          .slider-container.mt-6
            = render SliderComponent.new(label: t('profiles_controller.age_range'), val_min: 0, selected_val_min: params[:min_age] || 0, key_min: 'min_age', val_max: 100, selected_val_max: params[:max_age] || 100, key_max: 'max_age', form: form)
            = render SliderComponent.new(label: t('profiles_controller.height_range'), val_min: 40, selected_val_min: params[:min_height] || 40, key_min: 'min_height', val_max: 220, selected_val_max: params[:max_height] || 220, key_max: 'max_height', form: form)
            = render SliderComponent.new(label: t('profiles_controller.shirt_size_range'), val_min: 1, selected_val_min: params[:min_shirt_size] || 1, key_min: 'min_shirt_size', val_max: 74, selected_val_max: params[:max_shirt_size] || 74, key_max: 'max_shirt_size', form: form)
            = render SliderComponent.new(label: t('profiles_controller.pants_size_range'), val_min: 1, selected_val_min: params[:min_pants_size] || 1, key_min: 'min_pants_size', val_max: 70, selected_val_max: params[:max_pants_size] || 70, key_max: 'max_pants_size', form: form)
            = render SliderComponent.new(label: t('profiles_controller.shoe_size_range'), val_min: 16, selected_val_min: params[:min_shoe_size] || 16, key_min: 'min_shoe_size', val_max: 54, selected_val_max: params[:max_shoe_size] || 54, key_max: 'max_shoe_size', form: form)

        .hidden.grid.grid-cols-2.md:grid-cols-2.lg:grid-cols-4.gap-4.mt-6.text-sm.p-6.cursor{role: "list", data: { profiles_form_target: 'habilitiesTabContent' }}
          - Form::FEATURES_OPTIONS.each do |category, skills|
            .w-full.relative.pr-6.my-4{data: {controller: 'range-slider'}, class: 'p-4 bg-dark text-white rounded-xl'}
              %h3.text-lg.font-bold
                = t("profiles_controller.skills_category.#{category}")
              .grid.grid-cols-1
                - skills.each do |skill|
                  = render CustomCheckboxComponent.new(form: form, label: t("profiles_controller.features.#{category}.#{skill}"), key: "skills[#{category}][]", value: skill, checked: params.dig(:skills, category)&.include?(skill))
        .actions.text-center.p-10.sticky.bottom-0.z-50
          = form.submit t('labels.search'), class: "btn-primary mr-4 shadow-sm", data: { action: "click->profiles-form#close" }
          .btn-secondary.shadow-sm{ data: { action: "click->profiles-form#close" }}
            = t('labels.close')

    .flex.flex-col.sm:flex-row.justify-between.items-center.text-sm.gap-4.text-sm.text-shadowy-200
      = render SelectComponent.new(key: :form_id, label: t('profiles_controller.search_terms.select_form'), options_for_select: options_for_select(@forms.map { |f| [f.name, f.id] }, selected: params[:form_id]), placeholder: t('labels.all'), form: form, data: {action: 'change->autosave#save'}, style: 'min-width: 250px;')
      = render SelectComponent.new(key: :order_by, label: t('profiles_controller.search_terms.order_by'), options_for_select: options_for_select(Profile::ORDER_BY.keys.map { |order| [t("profiles_controller.search_terms.#{order}"), order] }, params[:order_by]), placeholder: t('profiles_controller.search_terms.select'), form: form, data: {action: 'change->autosave#save'}, style: 'min-width: 250px;')

      .flex.items-center.justify-end.gap-2{class: 'w-1/2'}
        %div{class: 'inline-flex items-center bg-primary rounded-full px-4 py-3 text-md font-semibold text-dark transition duration-200 cursor-pointer hover:bg-dark hover:text-primary hover:ring-1 hover:ring-primary hover:transition-all focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary', data: { action: "click->profiles-form#open" } }
          = render BootstrapIconWithTextComponent.new(icon: 'funnel', text: 'Filter', extra_classes: 'text-xl')
        = link_to manager_profiles_path, data: { turbo_frame: '_top' } do
          %div{class: 'inline-flex items-center rounded-3xl ring-1 ring-primary bg-dark px-4 py-3 text-md font-medium text-primary transition duration-200 cursor-pointer hover:bg-primary hover:text-dark hover:transition-all focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-600'}
            = render BootstrapIconWithTextComponent.new(icon: 'arrow-clockwise', text: 'Reset', extra_classes: 'text-xl')

    .mt-6
      %p.text-sm.font-medium.leading-6.text-gray-400
        = t('labels.results')
      %p.flex.items-baseline.gap-x-2
        %span.text-4xl.font-semibold.tracking-tight.text-white
          = @total_count

    = turbo_frame_tag "profiles-#{@pagy.page}", class: 'profiles' do
      .custom-profile-container{role: "list"}
        = render partial: 'profile', collection: @profiles
      = turbo_frame_tag "profiles-#{@pagy.next}", class: 'products', src: pagy_url_for(@pagy, @pagy.next), loading: :lazy if @pagy.next


    = turbo_frame_tag 'profile_modal'
